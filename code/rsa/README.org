
#+begin_src python :kernel sagemath :exports both
load("poc.py")
bulk_run(2048, 512-16, 8, seed=0, msb=True, correct=True, jobs=8, h=36)
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
True 153578841830360776565460871189986826853164973373632578320479105356718758452159427381932213143177337096945301921281293765718566382086300854032852695990523519241157656232460770439699323536315720526644268213605121036925980706849259554941676383148415307729559362443631507745008656748885446965672606785007698111887
True 103512864376513636474747773062824627551794720347388459172866960777923367308667492574535625365825526120736506274772214670160107032347677100000293626434320603402602037211843985672418995283470262401870201221139951521891947482809804608782695918797436613127007465223173856581803745522388922787430046718629959967913
True 178159500873448785047858146484870734992863332621460210297653776096301800908201073367536274539509027012629630526622783457094579788903419762888086085686952666079012331090055050030697686445236022534872570342018920072485862664677211295305343461616455657659756316607140113356362774071141201766774646237562493723591
True 117138025394644738850556366664268317541091210761704858302818043897575542748098085610983232724765086177066357878037390676480793570028071414863214276536302883530968607742180428780455578501462713926337233581950264975388570087894001965232413327910973625826258789387392071537914938646381151975610398175704903200297
True 149639880718388132546825743075198052090813754506178381791695253957858117474248943351007906804082127327560941212348063535341716025490524113006505702721750705695098465877483543509986623568888107549418844571380655716309574062700991706168092533240446190782357580409624717202652254087588289965851156403029123681577
True 153404671292178377537112969709443674694803936315144358980489269826027528395896030694011406328429042772944447561271089295652113226023328855020136627774022073306657846659725434788695711720677537015130612304435138622263498804718918704439878428488899569605687320923120024822868022041477058088249056494213550452981
True 152981315245588931097717196842333163509534246546564913757081584521417458048151222537306190015554356178983593927068750706103494368330101610856415361124370415059570318868154088559252031999472706038396737192071345599107513045301686353294970211385648930265041131733788916513909469252143331066771811634205953224797
True 172219956390795087673574797074022674339425834422586960716694966162507137282245774712656617527391129511173214568937384540445724468649901082713149137673965206020581206728084362611592711176332174423825835441561248543199391959072523623910788825439892630851689462369218652197282195185785603697486505341992186595099
rate: 1, avg t: 7.310460874999999, max t: 8.290296
#+end_example
: (1, 7.310460874999999, 8.290296)
:END:


#+begin_src python :kernel sagemath :exports both
load("poc.py")
bulk_run(2048, 512-16, 8, seed=0, msb=True, correct=False, jobs=8, h=36)
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
False 1
False
False 1
False
False
False
False 18843694578999353281729557687306263316720172973003384857773515313002677903054423571521116369935763270595546656936504796369161664392863286761315906940209400382928386157458507139371432631430263836188255432718544292170499887344727115258841455751173488221034235579150953782322029778206205879263939325067902651996698922935108188711871519264847164498049304396102297950517407345799914554306827821735067613873135421573809898200155700382189205228045773147411332372414754812834311771029334024510744688226736515592593434391993553898862533547038029125379451063598354447157227373899692758816297973673157878157590765565961654624627
False 1
rate: 0, avg t: 6.692976000000001, max t: 7.5859209999999955
#+end_example
: (0, 6.692976000000001, 7.5859209999999955)
:END:


#+begin_src python :kernel sagemath :exports both
load("poc.py")
bulk_run(2048, 512-16, 8, seed=0, msb=True, correct=True, jobs=8, h=36, verbose=True)
#+end_src

#+RESULTS:
:RESULTS:
#+begin_example
h: 36, u: 18
h: 36, u: 18
h: 36, u: 18
True 153578841830360776565460871189986826853164973373632578320479105356718758452159427381932213143177337096945301921281293765718566382086300854032852695990523519241157656232460770439699323536315720526644268213605121036925980706849259554941676383148415307729559362443631507745008656748885446965672606785007698111887
h: 36, u: 18
True 178159500873448785047858146484870734992863332621460210297653776096301800908201073367536274539509027012629630526622783457094579788903419762888086085686952666079012331090055050030697686445236022534872570342018920072485862664677211295305343461616455657659756316607140113356362774071141201766774646237562493723591
True 103512864376513636474747773062824627551794720347388459172866960777923367308667492574535625365825526120736506274772214670160107032347677100000293626434320603402602037211843985672418995283470262401870201221139951521891947482809804608782695918797436613127007465223173856581803745522388922787430046718629959967913
h: 36, u: 18
True 117138025394644738850556366664268317541091210761704858302818043897575542748098085610983232724765086177066357878037390676480793570028071414863214276536302883530968607742180428780455578501462713926337233581950264975388570087894001965232413327910973625826258789387392071537914938646381151975610398175704903200297
True 149639880718388132546825743075198052090813754506178381791695253957858117474248943351007906804082127327560941212348063535341716025490524113006505702721750705695098465877483543509986623568888107549418844571380655716309574062700991706168092533240446190782357580409624717202652254087588289965851156403029123681577
h: 36, u: 18
True 153404671292178377537112969709443674694803936315144358980489269826027528395896030694011406328429042772944447561271089295652113226023328855020136627774022073306657846659725434788695711720677537015130612304435138622263498804718918704439878428488899569605687320923120024822868022041477058088249056494213550452981
h: 36, u: 18
True 152981315245588931097717196842333163509534246546564913757081584521417458048151222537306190015554356178983593927068750706103494368330101610856415361124370415059570318868154088559252031999472706038396737192071345599107513045301686353294970211385648930265041131733788916513909469252143331066771811634205953224797
h: 36, u: 18
True 172219956390795087673574797074022674339425834422586960716694966162507137282245774712656617527391129511173214568937384540445724468649901082713149137673965206020581206728084362611592711176332174423825835441561248543199391959072523623910788825439892630851689462369218652197282195185785603697486505341992186595099
rate: 1, avg t: 6.901490374999999, max t: 7.521823999999999
#+end_example
: (1, 6.901490374999999, 7.521823999999999)
:END:

* Symbolic

#+begin_src python :kernel sagemath :exports both
var("X,q_0,N")
h = 4
u = 2
f_ = []
for i in range(h):
    if i < u:
        f_.append(N^(u-i) * (q_0 + x)^i)
    else:
        f_.append(x^(i-u) * (q_0 + x)^u)
    print(latex(f_[-1].expand()))
#+end_src

#+RESULTS:
: N^{2}
: N q_{0} + N x
: q_{0}^{2} + 2 \, q_{0} x + x^{2}
: q_{0}^{2} x + 2 \, q_{0} x^{2} + x^{3}

